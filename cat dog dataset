import os
import torch as t
from PIL import Image
import numpy as np
from torch.utils import data
from torchvision import transforms as T

transform = T.Compose([
    T.Resize(224),
    T.CenterCrop(224),
    T.ToTensor(),#自动归一化
    T.Normalize(mean=[.5,.5,.5], std=[.5,.5,.5])#标准化至[-1,1]
])

class DogCat (data.Dataset):
    def __init__(self,root,transforms=None):
        imgs = os.listdir(root)#所有图片的路径，不实际加载图片，只是指定路径，调用getitem时才真正读图片
        self.imgs = [os.path.join(root,img) for img in imgs]
        
    def __getitem__(self,index):
        img_path = self.imgs[index]
        #dog->1, cat->0
        label = 1 if 'dog' in img_path.split('/')[-1] else 0
        pil_img = Image.open(img_path)
        array = np.asarray(pil_img)
        data = t.from_numpy(array)
        return data,label
    def __len__(self):
        return len(self.imgs)
    
dataset = DogCat('/E/DC/')
img,label = dataset[0]
for img, label in dataset:
     print(img.size(),img.float().mean(), label)
